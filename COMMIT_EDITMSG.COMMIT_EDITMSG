Added markscheme and stuff

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/__pycache__/responses.cpython-310.pyc b/__pycache__/responses.cpython-310.pyc
index f17d4f1..b5d309f 100644
Binary files a/__pycache__/responses.cpython-310.pyc and b/__pycache__/responses.cpython-310.pyc differ
diff --git a/responses.py b/responses.py
index c940f2a..34fbb07 100644
--- a/responses.py
+++ b/responses.py
@@ -21,8 +21,7 @@ def help_func():
         list_o_subjects += "- " + list(single_letter_key.keys())[list(single_letter_key.values()).index(e)] + " || " + e + "\n"
 
     return f'## Hello! This is the eye bee docks bot!!\n\
-Please use **%bee** for a random subject, and **%bee [subject]** for a random paper in that subject!\n\
-Nothing else is supported at the moment, and its just math and phys, but its alright!! You got this for sure !!\n\
+The syntax is simple!\nFor a random paper in math HL, physics HL, or chemistry SL, you would write\n```%bee m p c - h h s```\nIt\'s that simple! (spaces are optional, but dash is not\
 ### Supported subjects (WRITE AS STATED OR USE KEY):\n```{list_o_subjects}```\
 \nnotes: languages dont work lmao :)\n\
 If you find any bugs, or if the links stop working, please message me incessantly until I yell and block you!!! I will fix asap!\n\
@@ -37,14 +36,21 @@ def text_formatter(params:tuple) -> str:
 
 
 def handle_string(user_input:str) -> str:
-    subjects = []
-    print(f'[{user_input}]')
-    if user_input == "help" or user_input == "h":
+    if user_input == "help" or user_input == "h" or user_input == "":
         return help_func()
-    for word in user_input:
+    if "-" not in user_input:
+        return "Please specify levels with a - ! Refer to %bee help!"
+    u_i_list = user_input.split("-")
+    subjects = []
+    print(f'[{u_i_list}]')
+    for word in u_i_list[0]:
         if word in single_letter_key:
             subjects.append(single_letter_key.get(word))
-    return text_formatter(exam_of_the_day(subjects, 2010, 2023, 0, 0, 0));
+    levels = str(u_i_list[1]).replace(" ", "")
+    levellist = []
+    for letter in levels:
+        levellist.append("SL" if letter == "s" else "HL")
+    return text_formatter(exam_of_the_day(subjects, 2010, 2023, 0, levellist, 0));
 
 
 def get_response(user_input:str) -> str:
@@ -54,10 +60,10 @@ def get_response(user_input:str) -> str:
     return final_response
     #return handle_string(user_input[4:])
 
-def exam_of_the_day(subjects: list, minyear: int, maxyear: int, time_o_year: int, level: int, papers: int):
+def exam_of_the_day(subjects: list, minyear: int, maxyear: int, time_o_year: int, level: list[str], papers: int):
     c_subject = choice(subjects)
+    c_level = level[subjects.index(c_subject)]
     c_year = randint(minyear, maxyear)
-    c_level = "HL" if level == 0 else "SL"
     if papers == 0:
         papers = randint(1,2)
     if time_o_year == 0: